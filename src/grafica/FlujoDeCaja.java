package grafica;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.themes.ValoTheme;
import com.vaadin.data.Property.ValueChangeEvent;
import logica.Logica;
import utils.Utils;
import valueObject.VOFlujoCaja;
import valueObject.VOMoneda;

public class FlujoDeCaja extends CustomComponent implements View {

	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private VerticalLayout mainLayout;
	private HorizontalLayout dateLayout;	
	private PopupDateField date;
	private Label lblTitle;
	private ComboBox cboMoneda;
	private Table tblFlujo;
	private BeanItemContainer<VOFlujoCaja> ds;	
	private Logica logica;
	private Label lblMessage;
	private Button btnExcelExport;
	private Button btnAddOneDay;
	private Button btnSubstractOneDay;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public FlujoDeCaja() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		logica = new Logica();
				
		btnAddOneDay.addClickListener(new ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				Calendar cal = Calendar.getInstance();
				cal.setTime(date.getValue());
				cal.add(Calendar.DATE, 1);
				date.setValue(cal.getTime());		            
			}
		});	
		
		btnSubstractOneDay.addClickListener(new ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				Calendar cal = Calendar.getInstance();
				cal.setTime(date.getValue());
				cal.add(Calendar.DATE, -1);
				date.setValue(cal.getTime());		            
			}
		});	
		
		
		 btnExcelExport.addClickListener(new ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				Utils.exportTableAsExcel(tblFlujo,"Flujo de Caja",date.getValue().toString());
			}
		});	
				
		date.addValueChangeListener(new ValueChangeListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub		
				getFlujoDeCaja();					
			}
		});
		
		cboMoneda.addValueChangeListener(new ValueChangeListener() {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				// TODO Auto-generated method stub
				getFlujoDeCaja();					
			}
		});
	}

	@AutoGenerated
	private void buildMainLayout() {
		// the main layout and components will be created here
		mainLayout = new VerticalLayout();	
		mainLayout.setSpacing(true);		
		mainLayout.setImmediate(true);
		mainLayout.setWidth("100%");
		mainLayout.setDefaultComponentAlignment(Alignment.TOP_CENTER);
		
		lblTitle = new Label("Flujo de caja");
		lblTitle.setSizeUndefined();
		lblTitle.setStyleName("h2");
		mainLayout.addComponent(lblTitle);
		
//		firstRow = new HorizontalLayout();	
//		firstRow.setSpacing(true);
//		firstRow.setImmediate(true);	
//		firstRow.addStyleName(ValoTheme.LAYOUT_HORIZONTAL_WRAPPING);
//		mainLayout.addComponent(firstRow);		
		
		dateLayout = new HorizontalLayout();
		dateLayout.setSpacing(false);
		dateLayout.setImmediate(true);
		mainLayout.addComponent(dateLayout);
		
		btnSubstractOneDay = new Button(new ThemeResource("icons/angle-left.png"));
		btnSubstractOneDay.setStyleName(ValoTheme.BUTTON_BORDERLESS);		
		dateLayout.addComponent(btnSubstractOneDay);
		dateLayout.setComponentAlignment(btnSubstractOneDay, Alignment.BOTTOM_CENTER);
		
		date = new PopupDateField();				
		date.setCaption("Fecha");
		date.setImmediate(true);		
		dateLayout.addComponent(date);
		
		btnAddOneDay = new Button(new ThemeResource("icons/angle-right.png"));
		btnAddOneDay.setStyleName(ValoTheme.BUTTON_BORDERLESS);
		dateLayout.addComponent(btnAddOneDay);
		dateLayout.setComponentAlignment(btnAddOneDay, Alignment.BOTTOM_CENTER);
		
		cboMoneda = new ComboBox();
		cboMoneda.setCaption("Moneda");	
		cboMoneda.setNullSelectionAllowed(false);
		cboMoneda.setImmediate(true);
		mainLayout.addComponent(cboMoneda);
		
		lblMessage = new Label("");
		lblMessage.setStyleName("messageAlert");
		lblMessage.setSizeUndefined();
		mainLayout.addComponent(lblMessage);
		
		tblFlujo = new Table();		
		tblFlujo.setSizeFull();
		
		btnExcelExport = new Button();
		btnExcelExport.setIcon(new ThemeResource("icons/download.png"));
		btnExcelExport.setStyleName(ValoTheme.BUTTON_BORDERLESS);
		
	}

	@Override
	public void enter(ViewChangeEvent event) {
		// TODO Auto-generated method stub
		if(tblFlujo != null){
			mainLayout.removeComponent(tblFlujo);		
		}
		
		lblMessage.setValue("");
		
		date.setValue(new Date());		
		cargarComboMonedas();
		
		
		
	}
	
	private void getFlujoDeCaja(){
		//Comprobar que la fecha sea valida y el combo tenga algo seleccionado
		//Obtener el id de la seleccion del combo
		//invocar el metodo flujoDeCaja con la fecha y moneda seleccionada
		//si existe un grid eliminarlo
		//si no es nulo armar el grid y agregarlo al componente
		
		if(tblFlujo != null){
			mainLayout.removeComponent(tblFlujo);			
		}
		
		if(btnExcelExport != null){
			mainLayout.removeComponent(btnExcelExport);
		}
		
		if(date.isValid() && cboMoneda.getValue() != null){			
			ArrayList<VOFlujoCaja> array =  logica.FlujoDeCaja(date.getValue(), (Integer)cboMoneda.getValue());
			if(array != null && !array.isEmpty()){
				ds = new BeanItemContainer<VOFlujoCaja>(VOFlujoCaja.class, array);
				
				tblFlujo.removeAllItems();
				tblFlujo.setContainerDataSource(ds);
				tblFlujo.setVisibleColumns("fecha", "descripcion","credito","debito","saldo");
				
				mainLayout.addComponent(btnExcelExport);
				mainLayout.addComponent(tblFlujo);
								
				lblMessage.setValue("");
			}else{
				lblMessage.setValue("No hay registros para mostrar");
			}
		}		
	}
	
	private void cargarComboMonedas(){
		cboMoneda.clear();	
		
		for (VOMoneda moneda : logica.ObtenerMonedas()) {
			cboMoneda.addItem(moneda.getId());
			cboMoneda.setItemCaption(moneda.getId(), moneda.getSimbolo());			
		}
		cboMoneda.setValue(cboMoneda.getItemIds().iterator().next());
		
	}

}
